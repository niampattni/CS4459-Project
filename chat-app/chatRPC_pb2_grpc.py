# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import chatRPC_pb2 as chatRPC__pb2


class chatServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterUser = channel.unary_unary(
                '/main.chatService/RegisterUser',
                request_serializer=chatRPC__pb2.RegisterRequest.SerializeToString,
                response_deserializer=chatRPC__pb2.Response.FromString,
                )
        self.ChannelPost = channel.unary_unary(
                '/main.chatService/ChannelPost',
                request_serializer=chatRPC__pb2.ChannelPostRequest.SerializeToString,
                response_deserializer=chatRPC__pb2.Response.FromString,
                )
        self.DirectMessage = channel.unary_unary(
                '/main.chatService/DirectMessage',
                request_serializer=chatRPC__pb2.DirectMessageRequest.SerializeToString,
                response_deserializer=chatRPC__pb2.Response.FromString,
                )
        self.Login = channel.unary_unary(
                '/main.chatService/Login',
                request_serializer=chatRPC__pb2.LoginRequest.SerializeToString,
                response_deserializer=chatRPC__pb2.Response.FromString,
                )
        self.Watch = channel.unary_unary(
                '/main.chatService/Watch',
                request_serializer=chatRPC__pb2.WatchRequest.SerializeToString,
                response_deserializer=chatRPC__pb2.Response.FromString,
                )
        self.Unwatch = channel.unary_unary(
                '/main.chatService/Unwatch',
                request_serializer=chatRPC__pb2.UnblockRequest.SerializeToString,
                response_deserializer=chatRPC__pb2.Response.FromString,
                )
        self.Block = channel.unary_unary(
                '/main.chatService/Block',
                request_serializer=chatRPC__pb2.BlockRequest.SerializeToString,
                response_deserializer=chatRPC__pb2.Response.FromString,
                )
        self.Unblock = channel.unary_unary(
                '/main.chatService/Unblock',
                request_serializer=chatRPC__pb2.UnblockRequest.SerializeToString,
                response_deserializer=chatRPC__pb2.Response.FromString,
                )


class chatServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChannelPost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DirectMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Watch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Unwatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Block(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Unblock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_chatServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterUser': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterUser,
                    request_deserializer=chatRPC__pb2.RegisterRequest.FromString,
                    response_serializer=chatRPC__pb2.Response.SerializeToString,
            ),
            'ChannelPost': grpc.unary_unary_rpc_method_handler(
                    servicer.ChannelPost,
                    request_deserializer=chatRPC__pb2.ChannelPostRequest.FromString,
                    response_serializer=chatRPC__pb2.Response.SerializeToString,
            ),
            'DirectMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.DirectMessage,
                    request_deserializer=chatRPC__pb2.DirectMessageRequest.FromString,
                    response_serializer=chatRPC__pb2.Response.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=chatRPC__pb2.LoginRequest.FromString,
                    response_serializer=chatRPC__pb2.Response.SerializeToString,
            ),
            'Watch': grpc.unary_unary_rpc_method_handler(
                    servicer.Watch,
                    request_deserializer=chatRPC__pb2.WatchRequest.FromString,
                    response_serializer=chatRPC__pb2.Response.SerializeToString,
            ),
            'Unwatch': grpc.unary_unary_rpc_method_handler(
                    servicer.Unwatch,
                    request_deserializer=chatRPC__pb2.UnblockRequest.FromString,
                    response_serializer=chatRPC__pb2.Response.SerializeToString,
            ),
            'Block': grpc.unary_unary_rpc_method_handler(
                    servicer.Block,
                    request_deserializer=chatRPC__pb2.BlockRequest.FromString,
                    response_serializer=chatRPC__pb2.Response.SerializeToString,
            ),
            'Unblock': grpc.unary_unary_rpc_method_handler(
                    servicer.Unblock,
                    request_deserializer=chatRPC__pb2.UnblockRequest.FromString,
                    response_serializer=chatRPC__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'main.chatService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class chatService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.chatService/RegisterUser',
            chatRPC__pb2.RegisterRequest.SerializeToString,
            chatRPC__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChannelPost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.chatService/ChannelPost',
            chatRPC__pb2.ChannelPostRequest.SerializeToString,
            chatRPC__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DirectMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.chatService/DirectMessage',
            chatRPC__pb2.DirectMessageRequest.SerializeToString,
            chatRPC__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.chatService/Login',
            chatRPC__pb2.LoginRequest.SerializeToString,
            chatRPC__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Watch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.chatService/Watch',
            chatRPC__pb2.WatchRequest.SerializeToString,
            chatRPC__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Unwatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.chatService/Unwatch',
            chatRPC__pb2.UnblockRequest.SerializeToString,
            chatRPC__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Block(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.chatService/Block',
            chatRPC__pb2.BlockRequest.SerializeToString,
            chatRPC__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Unblock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.chatService/Unblock',
            chatRPC__pb2.UnblockRequest.SerializeToString,
            chatRPC__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
