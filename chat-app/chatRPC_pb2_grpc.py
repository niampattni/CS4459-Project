# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import chatRPC_pb2 as chatRPC__pb2


class chatServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.registerUserOp = channel.unary_unary(
                '/main.chatService/registerUserOp',
                request_serializer=chatRPC__pb2.register.SerializeToString,
                response_deserializer=chatRPC__pb2.response.FromString,
                )
        self.channelPostOp = channel.unary_unary(
                '/main.chatService/channelPostOp',
                request_serializer=chatRPC__pb2.channelPost.SerializeToString,
                response_deserializer=chatRPC__pb2.response.FromString,
                )
        self.directMessageOp = channel.unary_unary(
                '/main.chatService/directMessageOp',
                request_serializer=chatRPC__pb2.directMessage.SerializeToString,
                response_deserializer=chatRPC__pb2.response.FromString,
                )
        self.loginOp = channel.unary_unary(
                '/main.chatService/loginOp',
                request_serializer=chatRPC__pb2.login.SerializeToString,
                response_deserializer=chatRPC__pb2.response.FromString,
                )
        self.watchOp = channel.unary_unary(
                '/main.chatService/watchOp',
                request_serializer=chatRPC__pb2.watch.SerializeToString,
                response_deserializer=chatRPC__pb2.response.FromString,
                )
        self.unwatchOp = channel.unary_unary(
                '/main.chatService/unwatchOp',
                request_serializer=chatRPC__pb2.unwatch.SerializeToString,
                response_deserializer=chatRPC__pb2.response.FromString,
                )
        self.blockOp = channel.unary_unary(
                '/main.chatService/blockOp',
                request_serializer=chatRPC__pb2.block.SerializeToString,
                response_deserializer=chatRPC__pb2.response.FromString,
                )
        self.unblockOp = channel.unary_unary(
                '/main.chatService/unblockOp',
                request_serializer=chatRPC__pb2.unblock.SerializeToString,
                response_deserializer=chatRPC__pb2.response.FromString,
                )


class chatServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def registerUserOp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def channelPostOp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def directMessageOp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def loginOp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def watchOp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def unwatchOp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def blockOp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def unblockOp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_chatServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'registerUserOp': grpc.unary_unary_rpc_method_handler(
                    servicer.registerUserOp,
                    request_deserializer=chatRPC__pb2.register.FromString,
                    response_serializer=chatRPC__pb2.response.SerializeToString,
            ),
            'channelPostOp': grpc.unary_unary_rpc_method_handler(
                    servicer.channelPostOp,
                    request_deserializer=chatRPC__pb2.channelPost.FromString,
                    response_serializer=chatRPC__pb2.response.SerializeToString,
            ),
            'directMessageOp': grpc.unary_unary_rpc_method_handler(
                    servicer.directMessageOp,
                    request_deserializer=chatRPC__pb2.directMessage.FromString,
                    response_serializer=chatRPC__pb2.response.SerializeToString,
            ),
            'loginOp': grpc.unary_unary_rpc_method_handler(
                    servicer.loginOp,
                    request_deserializer=chatRPC__pb2.login.FromString,
                    response_serializer=chatRPC__pb2.response.SerializeToString,
            ),
            'watchOp': grpc.unary_unary_rpc_method_handler(
                    servicer.watchOp,
                    request_deserializer=chatRPC__pb2.watch.FromString,
                    response_serializer=chatRPC__pb2.response.SerializeToString,
            ),
            'unwatchOp': grpc.unary_unary_rpc_method_handler(
                    servicer.unwatchOp,
                    request_deserializer=chatRPC__pb2.unwatch.FromString,
                    response_serializer=chatRPC__pb2.response.SerializeToString,
            ),
            'blockOp': grpc.unary_unary_rpc_method_handler(
                    servicer.blockOp,
                    request_deserializer=chatRPC__pb2.block.FromString,
                    response_serializer=chatRPC__pb2.response.SerializeToString,
            ),
            'unblockOp': grpc.unary_unary_rpc_method_handler(
                    servicer.unblockOp,
                    request_deserializer=chatRPC__pb2.unblock.FromString,
                    response_serializer=chatRPC__pb2.response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'main.chatService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class chatService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def registerUserOp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.chatService/registerUserOp',
            chatRPC__pb2.register.SerializeToString,
            chatRPC__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def channelPostOp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.chatService/channelPostOp',
            chatRPC__pb2.channelPost.SerializeToString,
            chatRPC__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def directMessageOp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.chatService/directMessageOp',
            chatRPC__pb2.directMessage.SerializeToString,
            chatRPC__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def loginOp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.chatService/loginOp',
            chatRPC__pb2.login.SerializeToString,
            chatRPC__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def watchOp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.chatService/watchOp',
            chatRPC__pb2.watch.SerializeToString,
            chatRPC__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def unwatchOp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.chatService/unwatchOp',
            chatRPC__pb2.unwatch.SerializeToString,
            chatRPC__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def blockOp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.chatService/blockOp',
            chatRPC__pb2.block.SerializeToString,
            chatRPC__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def unblockOp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/main.chatService/unblockOp',
            chatRPC__pb2.unblock.SerializeToString,
            chatRPC__pb2.response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
